{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/imageGrid.js","comps/Title.js","hooks/useStorage.js","comps/progressBar.js","comps/uploadForm.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","projectStorage","getAnalytics","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","console","log","className","map","key","src","url","alt","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","style","width","UploadForm","types","type","onChange","e","selected","target","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1729c9ad.chunk.js","sourcesContent":["import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/storage';\r\nimport 'firebase/compat/firestore';\r\n\r\n\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDwovSK2q7apBydqZc5Vqjfak-HN-k62rI\",\r\n  authDomain: \"wolverineflicks.firebaseapp.com\",\r\n  projectId: \"wolverineflicks\",\r\n  storageBucket: \"wolverineflicks.appspot.com\",\r\n  messagingSenderId: \"889794144081\",\r\n  appId: \"1:889794144081:web:8ffac0ad8471b19d385570\",\r\n  measurementId: \"G-FHDLQKJGNK\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = firebase.initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport {projectStorage, projectFirestore, timestamp};","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // takes a snapshot at the whole database at that point in time once\r\n        // once collection changes, this function is called again\r\n        const unsub = projectFirestore.collection(collection)\r\n        .orderBy('createdAt', 'desc')\r\n        .onSnapshot((snap) => {\r\n            let documents = [];\r\n            snap.forEach(doc => {\r\n                documents.push({...doc.data(), id: doc.id})\r\n            });\r\n            setDocs(documents);\r\n        })\r\n\r\n        // cleanup function when we don't need it\r\n        return () => unsub();\r\n    }, [collection] )\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../hooks/useFirestore';\r\n\r\nconst ImageGrid = () => {\r\n    const {docs } = useFirestore('images');\r\n    console.log(docs);\r\n\r\n    return (\r\n        <div className=\"img-grid\">\r\n            {docs && docs.map(doc => (\r\n                <div className='img-wrap' key={doc.id}>\r\n                    <img src={doc.url} alt=\"uploaded pic\"/>\r\n                </div>\r\n            ) )}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title\">\r\n      <h1>Wolverine<span>Flicks</span></h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title;","import {useState,useEffect } from \"react\";\r\nimport {projectStorage, projectFirestore, timestamp} from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // references for the pictures stored\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection('images');\r\n\r\n        // whenever state changes, we fire a snapshot function \r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({ url, createdAt})\r\n            setUrl(url);\r\n        })\r\n\r\n    }, [file]);\r\n\r\n    return {progress, url, error}\r\n}\r\n\r\nexport default useStorage;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\n\r\nconst ProgressBar = ({file, setFile}) => {\r\n    const {url, progress} = useStorage(file);\r\n    console.log(progress, url);\r\n\r\n    useEffect(() => {\r\n        if (url){\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile])\r\n\r\n    return (\r\n        <div className=\"progress-bar\" style= {{width: progress + '%'}}></div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport ProgressBar from './progressBar';\r\n\r\nconst UploadForm = () => {\r\n    const types = ['image/png', 'image/jpeg'];\r\n    const [error, setError] = useState(null);\r\n    const [file, setFile] = useState(null);\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n        \r\n        if (selected && types.includes(selected.type)){\r\n            setFile(selected);\r\n            setError('');\r\n        } else {\r\n            setFile(null);\r\n            setError('Please select an image file in png or jpeg format');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <label>\r\n                <input type=\"file\" onChange={changeHandler}/>\r\n                <span>+</span>\r\n            </label>\r\n            <div className=\"output\">\r\n                {error && <div className=\"error\">{ error } </div>}\r\n                {file && <div>{ file.name } </div> }\r\n                {file && <ProgressBar file = {file} setFile={setFile}/>}\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default UploadForm;","import React from 'react';\r\nimport ImageGrid from './comps/imageGrid';\r\nimport Title from './comps/Title';\r\nimport UploadForm from './comps/uploadForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Title/>\r\n      <UploadForm/>\r\n      <ImageGrid/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}